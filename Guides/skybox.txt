THIS IS AFTER SHADER FUNCTIONS

    // Now Determine Skybox Vertices and Indices
    float skyboxVertices[]{
        -1.f, -1.f, 1.f, //0
        1.f, -1.f, 1.f,  //1
        1.f, -1.f, -1.f, //2
        -1.f, -1.f, -1.f,//3
        -1.f, 1.f, 1.f,  //4
        1.f, 1.f, 1.f,   //5
        1.f, 1.f, -1.f,  //6
        -1.f, 1.f, -1.f  //7
    };

    unsigned int skyboxIndices[]{
        1,2,6,
        6,5,1,

        0,4,7,
        7,3,0,

        4,5,6,
        6,7,4,

        0,3,2,
        2,1,0,

        0,1,5,
        5,4,0,

        3,7,6,
        6,2,3
    };

    std::string skyboxFaces[]{
        "Models and Textures/Skybox/rainbow_rt.png",
        "Models and Textures/Skybox/rainbow_lf.png",
        "Models and Textures/Skybox/rainbow_up.png",
        "Models and Textures/Skybox/rainbow_dn.png",
        "Models and Textures/Skybox/rainbow_ft.png",
        "Models and Textures/Skybox/rainbow_bk.png"
    };

    unsigned int skyboxTexture;
    glGenTextures(1, &skyboxTexture);
    glBindTexture(GL_TEXTURE_CUBE_MAP, skyboxTexture);
    glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
    glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_MIN_FILTER, GL_LINEAR);

    glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_WRAP_R, GL_CLAMP_TO_EDGE);
    glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
    glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);

    for (unsigned int i = 0; i < 6; i++){
        int w, h, skyChannel;
        stbi_set_flip_vertically_on_load(false);

        unsigned char* data = stbi_load(skyboxFaces[i].c_str(),
            &w,
            &h,
            &skyChannel,
            0
        );

        if (data){
            glTexImage2D(
                GL_TEXTURE_CUBE_MAP_POSITIVE_X + i,
                0,
                GL_RGB,
                w,
                h,
                0,
                GL_RGB,
                GL_UNSIGNED_BYTE,
                data
            );
        }
        stbi_image_free(data);
    }

    stbi_set_flip_vertically_on_load(true);

    // skybox - VBO, VAO, and EBO Magic
    unsigned int skyboxVBO, skyboxVAO, skyboxEBO;
    glGenVertexArrays(1, &skyboxVAO);
    glGenBuffers(1, &skyboxVBO);
    glGenBuffers(1, &skyboxEBO);

    glBindVertexArray(skyboxVAO);

    glBindBuffer(GL_ARRAY_BUFFER, skyboxVBO);
    glBufferData(GL_ARRAY_BUFFER, sizeof(skyboxVertices), &skyboxVertices, GL_STATIC_DRAW);
    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);

    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, skyboxEBO);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(GL_INT) * 36, &skyboxIndices, GL_STATIC_DRAW);

    glEnableVertexAttribArray(0);


    -------- THEN THIS WAS FOR RENDERING THE Skybox glDepthMask(GL_FALSE);
  // Skybox Stuff
        glDepthMask(GL_FALSE);
        glDepthFunc(GL_LEQUAL);
        glUseProgram(skyboxShaderProgram);

        glm::mat4 skyboxViewMatrix = glm::mat4(1.f);
        skyboxViewMatrix = glm::mat4(glm::mat3(activeCameraPointer->GetCameraViewMatrix()));

        unsigned int uniformSkyboxViewLocation = glGetUniformLocation(skyboxShaderProgram, "view");
        glUniformMatrix4fv(uniformSkyboxViewLocation, 1, GL_FALSE, glm::value_ptr(skyboxViewMatrix));
        
        unsigned int uniformSkyboxProjectionLocation = glGetUniformLocation(skyboxShaderProgram, "projection");
        glUniformMatrix4fv(uniformSkyboxProjectionLocation, 1, GL_FALSE, glm::value_ptr(activeCameraPointer->GetCameraProjectionMatrix()));

        // Rendering Skybox
        glDepthMask(GL_FALSE);
        glUseProgram(skyboxShaderProgram);
        glBindVertexArray(skyboxVAO);
        glActiveTexture(GL_TEXTURE0);
        glBindTexture(GL_TEXTURE_CUBE_MAP, skyboxTexture);
        glDrawElements(GL_TRIANGLES, 36, GL_UNSIGNED_INT, 0);
        glDepthMask(GL_TRUE);
        glDepthFunc(GL_LESS);